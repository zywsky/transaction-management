package com.banking.model;

import com.banking.enums.DebitCredit;
import com.banking.enums.TransactionStatus;
import com.banking.enums.TransactionType;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.Digits;
import jakarta.validation.constraints.Size;
import jakarta.validation.constraints.Pattern;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Objects;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Transaction entity class, containing core fields and validations </br>
 * Created Index for performance optimizations
 */
@Entity
@Table(name = "transactions", indexes = {
    @Index(name = "idx_account_timestamp", columnList = "account_number, created_at"),
    @Index(name = "idx_status_timestamp", columnList = "status, created_at"),
    @Index(name = "idx_trade_no", columnList = "trade_no", unique = true)
})
@Schema(description = "Bank transaction entity")
public class Transaction {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @JsonProperty(access = JsonProperty.Access.READ_ONLY)
    @Column(name = "id", nullable = false)
    @Schema(description = "Transaction ID, auto-generated by system", example = "1", accessMode = Schema.AccessMode.READ_ONLY)
    private Long id;

    @NotBlank(message = "Trade number is required")
    @Pattern(regexp = "^\\d{18}$", message = "Invalid trade number format")
    @Column(name = "trade_no", nullable = false, unique = true)    
    @Schema(description = "18-digit transaction reference number", example = "123456789012345654", required = true)
    private String tradeNo;

    @NotBlank(message = "Account number is required")
    @Size(min = 10, max = 20, message = "Account number must be between 10 and 20 characters")
    @Pattern(regexp = "^[0-9]+$", message = "Account number can only contain digits")
    @Column(name = "account_number", nullable = false)
    @Schema(description = "Transaction account number, 10-20 digits", example = "1234567890123456", required = true)
    private String accountNumber;

    @NotBlank(message = "Account name is required")
    @Size(min = 2, max = 100, message = "Account name must be between 2 and 100 characters")
    @Pattern(regexp = "^[\\p{L} ]+$", message = "Account name can only contain letters and spaces")
    @Column(name = "account_name", nullable = false)
    @Schema(description = "Account name, letters and spaces only", example = "John Doe", required = true)
    private String accountName;

    @NotBlank(message = "Payee account is required")
    @Size(min = 10, max = 20, message = "Payee account must be between 10 and 20 characters")
    @Pattern(regexp = "^[0-9]+$", message = "Payee account can only contain digits")
    @Column(name = "payee_account", nullable = false)
    @Schema(description = "Payee account number, 10-20 digits", example = "9876543210987654", required = true)
    private String payeeAccount;

    @NotBlank(message = "Payee name is required")
    @Size(min = 2, max = 100, message = "Payee name must be between 2 and 100 characters")
    @Column(name = "payee_name")
    @Schema(description = "Payee name", example = "Jane Smith")
    private String payeeName;

    @NotNull(message = "Amount is required")
    @DecimalMin(value = "0.01", message = "Amount must be equal or greater than 0.01")
    @Digits(integer = 19, fraction = 2, message = "Amount can have maximum 17 integer digits and 2 decimal places")
    @Column(name = "amount", nullable = false, precision = 19, scale = 2)
    @Schema(description = "Transaction amount, must be greater than 0", example = "500.00", required = true)
    private BigDecimal amount;

    @NotBlank(message = "Currency is required")
    @Size(min = 3, max = 3, message = "Currency is not valid")
    @Pattern(regexp = "^[A-Z]{3}$", message = "Currency must be a valid ISO currency code")
    @Column(name = "currency", nullable = false)
    @Schema(description = "Currency code, ISO standard", example = "CNY", required = true)
    private String currency;

    @Enumerated(EnumType.STRING)
    @Column(name = "status", nullable = false)
    @JsonProperty(access = JsonProperty.Access.READ_ONLY)
    @Schema(description = "Transaction status", example = "PENDING", accessMode = Schema.AccessMode.READ_ONLY)
    private TransactionStatus status = TransactionStatus.PENDING;

    @NotNull(message = "Transaction type is required")
    @Enumerated(EnumType.STRING)
    @Column(name = "type", nullable = false)
    @Schema(description = "Transaction type", example = "TO", required = true)
    private TransactionType type;

    @NotNull(message = "Debit/Credit indicator is required")
    @Enumerated(EnumType.STRING)
    @Column(name = "debit_credit", nullable = false)
    @Schema(description = "Debit/Credit indicator", example = "DEBIT", required = true)
    private DebitCredit debitCredit;

    @Column(name = "created_at", nullable = false)
    @JsonProperty(access = JsonProperty.Access.READ_ONLY)
    @Schema(description = "Creation time, auto generated by system", accessMode = Schema.AccessMode.READ_ONLY)
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    @JsonProperty(access = JsonProperty.Access.READ_ONLY)
    @Schema(description = "Update time, managed by system", accessMode = Schema.AccessMode.READ_ONLY)
    private LocalDateTime updatedAt;

    @Size(max = 500, message = "Description cannot exceed 500 characters")
    @Column(name = "description")
    @Schema(description = "Transaction description, max 500 characters", example = "Salary transfer")
    private String description;

    public Transaction() {
    }

    public Transaction(String accountNumber, String accountName, String payeeAccount,
                       BigDecimal amount, TransactionType type, String description) {
        this();
        this.accountNumber = accountNumber;
        this.accountName = accountName;
        this.payeeAccount = payeeAccount;
        this.amount = amount;
        this.type = type;
        this.description = description;
    }

    public void completeTransaction() {
        this.status = TransactionStatus.COMPLETED;
        this.updatedAt = LocalDateTime.now();
    }

    public void markAsFailed() {
        this.status = TransactionStatus.FAILED;
        this.updatedAt = LocalDateTime.now();
    }

    public Long getId() {
        return id;
    }
    
    public void setId(Long id) {
        this.id = id;
    }
    
    public String getTradeNo() {
        return tradeNo;
    }
    
    public void setTradeNo(String tradeNo) {
        this.tradeNo = tradeNo;
    }
    
    public String getAccountNumber() {
        return accountNumber;
    }
    
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }
    
    public String getAccountName() {
        return accountName;
    }
    
    public void setAccountName(String accountName) {
        this.accountName = accountName;
    }
    
    public String getPayeeAccount() {
        return payeeAccount;
    }
    
    public void setPayeeAccount(String payeeAccount) {
        this.payeeAccount = payeeAccount;
    }
    
    public String getPayeeName() {
        return payeeName;
    }
    
    public void setPayeeName(String payeeName) {
        this.payeeName = payeeName;
    }
    
    public BigDecimal getAmount() {
        return amount;
    }
    
    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }
    
    public String getCurrency() {
        return currency;
    }
    
    public void setCurrency(String currency) {
        this.currency = currency;
    }
    
    public TransactionStatus getStatus() {
        return status;
    }
    
    public void setStatus(TransactionStatus status) {
        this.status = status;
    }
    
    public TransactionType getType() {
        return type;
    }
    
    public void setType(TransactionType type) {
        this.type = type;
    }
    
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }
    
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }
    
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }
    
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }
    
    public String getDescription() {
        return description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    
    public DebitCredit getDebitCredit() {
        return debitCredit;
    }
    
    public void setDebitCredit(DebitCredit debitCredit) {
        this.debitCredit = debitCredit;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Transaction that = (Transaction) obj;
        return Objects.equals(id, that.id) &&
               Objects.equals(tradeNo, that.tradeNo);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, tradeNo);
    }

    @Override
    public String toString() {
        return "Transaction{" +
                "id=" + id +
                ", tradeNo='" + tradeNo + '\'' +
                ", accountNumber='" + accountNumber + '\'' +
                ", accountName='" + accountName + '\'' +
                ", payeeAccount='" + payeeAccount + '\'' +
                ", payeeName='" + payeeName + '\'' +
                ", amount=" + amount +
                ", currency='" + currency + '\'' +
                ", status=" + status +
                ", type=" + type +
                ", debitCredit=" + debitCredit +
                ", createdAt=" + createdAt +
                ", updatedAt=" + updatedAt +
                ", description='" + description + '\'' +
                '}';
    }
}